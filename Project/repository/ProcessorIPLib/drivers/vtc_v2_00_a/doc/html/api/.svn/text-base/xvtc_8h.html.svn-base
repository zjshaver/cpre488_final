<html>
<head>
   <meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>
   Xilinx Driver vtc v2_00_a: xvtc.h File Reference
</title>
<link href="../../../../../../../doc/usenglish/css/driver_api_doxygen.css" rel="stylesheet" type="text/css">
</head>
<h3 class="PageHeader">Xilinx Processor IP Library</h3>
<hl>Software Drivers</hl>
<hr class="whs1">

<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>Globals</span></a></li>
  </ul></div>
<h1>xvtc.h File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
This is the main header file of Xilinx MVI Video Timing Controller (VTC) device driver. The VTC device detects video signals, independently overrides any one of them, re-generates video signals with +/- delay and with polarity inversion, and generates up to 16 one cycle Frame Sync outputs.<p>
The device has the following main features:<ul>
<li>Detect video signals:<ul>
<li>horizontal sync</li><li>horizontal blank</li><li>vertical sync</li><li>vertical blank</li><li>active video</li><li>field id</li></ul>
</li><li>Independently override any one signal.</li><li>Re-generate video signals with +/- delay and with polarity inversion.</li><li>Generate up to 16 one cycle Frame Sync outputs.</li></ul>
<p>
For a full description of VTC features, please see the hardware specification.<p>
<b>Interrupt Service </b><p>
The interrupt types supported are:<ul>
<li>Frame Sync Interrupts 0 - 15</li><li>Generator interrupt<ul>
<li>Generator Active Video Interrupt</li><li>Generator VBLANK Interrupt</li></ul>
</li><li>Detector interrupt:<ul>
<li>Detector Active Video Interrupt</li><li>Detector VBLANK Interrupt</li></ul>
</li><li>Signal Lock interrupt<ul>
<li>Active Chroma signal lock</li><li>Active Video Signal Lock</li><li>Field ID Signal Lock</li><li>Vertical Blank Signal Lock</li><li>Vertical Sync Signal Lock</li><li>Horizontal Blank Signal Lock</li><li>Horizontal Sync Signal Lock</li></ul>
</li></ul>
<p>
<b>Software Initialization </b><p>
The application needs to do following steps in order for preparing the VTC to be ready to process video signal handling.<p>
<ul>
<li>Call <a class="el" href="xvtc_8h.html#3963ccd7235e286987f134bd9046b550">XVtc_LookupConfig()</a> using a device ID to find the device configuration.</li><li>Call <a class="el" href="xvtc_8c.html#8087baee1e4a76f1c61ec1d19bc04e4f">XVtc_CfgInitialize()</a> to initialize the device and the driver instance associated with it.</li><li>Call <a class="el" href="xvtc_8c.html#2f5db507f747a961b51626ce7942de66">XVtc_SetGenerator()</a> to set up the video signals to generate, if desired.</li><li>Call <a class="el" href="xvtc_8c.html#fe5c4a27d13ca8b7011a0dba2245bf93">XVtc_SetPolarity()</a> to set up the video signal polarity.</li><li>Call <a class="el" href="xvtc_8c.html#303989352607276682feb838aed85211">XVtc_SetSource()</a> for source selection</li><li>Call <a class="el" href="xvtc_8c.html#8abbdac51c6ffd531c883f4b357bcfe9">XVtc_SetGeneratorHoriOffset()</a> to set up the Generator VBlank/VSync horizontal offsets, if values other than the default are needed</li><li>Call <a class="el" href="xvtc_8h.html#e5e55c24d1ae96c70257b5f12a35392b">XVtc_EnableSync()</a>, if generator needs to be synced to the detector</li><li>Call <a class="el" href="xvtc_8c.html#39c8b6449b73e50cdeedaec31f17236c">XVtc_Enable()</a> to enable/start the VTC device.</li></ul>
<p>
<b> Examples </b><p>
An example is provided with this driver to demonstrate the driver usage.<p>
<b>Cache Coherency</b><p>
<b>Alignment</b><p>
<b>Limitations</b><p>
<b>BUS Interface</b><p>
<pre>
 MODIFICATION HISTORY:</pre><p>
<pre> Ver   Who  Date       Changes
 ----- ---- --------    -----------------------------------------------
 1.00a xd   08/05/08    First release
 1.01a xd   07/23/10    Added GIER; Added more h/w generic info into
                        xparameters.h; Feed callbacks with pending
                        interrupt info. Added Doxygen &amp; Version support
 2.00a xd   05/13/11    1. Renamed to "Video Timing Controller"
                        2. Added Generator/Detector VBlank/VSync
                           Horizontal offset setup/fetch support;
                        3. Renamed the IP to support to be axi_vtc;
                        4. Supported sync between generator and detector
                           with addition of new <a class="el" href="xvtc_8h.html#e5e55c24d1ae96c70257b5f12a35392b">XVtc_EnableSync()</a> and
                           <a class="el" href="xvtc_8h.html#60284143c79794ee7bc744aceac0bdab">XVtc_DisableSync()</a> functions;
                        5. Renamed XVtc_SetSync() to <a class="el" href="xvtc_8c.html#86c0bc8def549aefd6f82b68dd9be9f1">XVtc_SetFSync()</a>;
                        6. Renamed XVtc_GetSync() to <a class="el" href="xvtc_8c.html#33a1d9df5f2129f68ee00b03e2a7aa18">XVtc_GetFSync()</a>;
                        7. Removed unnecessary register write in
                           <a class="el" href="xvtc_8h.html#303ddf412ad5669e307670c9b2614ae6">XVtc_Reset()</a>;
                        8. Corrected driver name in .mdd file
                        9. Updated register bit definition(a few fields grow
                           from 12 to 13 bit wide)
 2.00a cm   05/25/11    1. Renamed XVtc_SetSkip() to <a class="el" href="xvtc_8c.html#04ea1388abb9e74b668c4e4307a5f190">XVtc_SetSkipLine()</a>;
                        2. Renamed XVtc_GetSkip() to <a class="el" href="xvtc_8c.html#26f5dfbd917ee8e4cdae22e81df9bc4c">XVtc_GetSkipLine()</a>;
                        3. Added <a class="el" href="xvtc_8c.html#a78d6393095b1d9c9ee6685d8d9883d9">XVtc_SetSkipPixel()</a>;
                        4. Added <a class="el" href="xvtc_8c.html#302dc0a7ab9c2452a75cb07b7052f627">XVtc_GetSkipPixel()</a>;
                        5. Renamed XVTC_CTL_GACS_MASK to XVTC_CTL_GACLS_MASK
                        6. Added XVTC_CTL_GACPS_MASK
 2.00a cm   06/16/12    1. Added missing xil_assert.h include
 </pre> 
<p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc___config.html">XVtc_Config</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc___polarity.html">XVtc_Polarity</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc___source_select.html">XVtc_SourceSelect</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_x_vtc.html">XVtc</a></td></tr>

<tr><td colspan="2"><br><h2>Interrupt Types for setting up Callbacks</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#93bb5bfd71a7156833af501b526bc8a4">XVTC_HANDLER_FRAMESYNC</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#73af3bfd88d97a639ded872ce1dd1f45">XVTC_HANDLER_LOCK</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#df093fd75bbafb2010ca07eba57183fa">XVTC_HANDLER_DETECTOR</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#17896f1c7cad6dd27c55cf7d6a374815">XVTC_HANDLER_GENERATOR</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#78fda648694107b89c5b4af1d0da0171">XVTC_HANDLER_ERROR</a></td></tr>

<tr><td colspan="2"><br><h2>Options for enabling VTC modules</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#0bdf216441e84c3f9e8f4ffbb507cf84">XVTC_EN_GENERATOR</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#6a80d13c82763b5842b46c05d63dfdbe">XVTC_EN_DETECTOR</a></td></tr>

<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#303ddf412ad5669e307670c9b2614ae6">XVtc_Reset</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#e5e55c24d1ae96c70257b5f12a35392b">XVtc_EnableSync</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#60284143c79794ee7bc744aceac0bdab">XVtc_DisableSync</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#d29ad37d83130344e671b42cf192d4a4">XVtc_GetDetectionStatus</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#02261b40383782a6c2aed8549853e5e0">XVtc_IntrEnableGlobal</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#3a34dc0b1bf0d711da36f2c5689208b2">XVtc_IntrDisableGlobal</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#cd0e0323f3ad893d2192d4c8a0075e48">XVtc_IntrEnable</a>(InstancePtr, IntrType)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#91e4d54ebf6934f4ffe64ab6fc8130b5">XVtc_IntrDisable</a>(InstancePtr, IntrType)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#dcef48015b5a2e32dfc3562b9aef6cb7">XVtc_IntrGetPending</a>(InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#f695aa364748f491a96e067b7dac03f7">XVtc_IntrClear</a>(InstancePtr, IntrType)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#5bf6e640406831d79bcb88cca274a38f">XVtc_IntrSetLockPolarity</a>(InstancePtr, LockPolarity)</td></tr>

<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef void(*)&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#c3ad54c700878dca76cb9529452c20d4">XVtc_CallBack</a> (void *CallBackRef, u32 Mask)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef void(*)&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#1fbd82cca1f8f904973c2560a23201c0">XVtc_ErrorCallBack</a> (void *CallBackRef, u32 ErrorMask)</td></tr>

<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#8087baee1e4a76f1c61ec1d19bc04e4f">XVtc_CfgInitialize</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___config.html">XVtc_Config</a> *CfgPtr, u32 EffectiveAddr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#39c8b6449b73e50cdeedaec31f17236c">XVtc_Enable</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u32 Type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#7084ab1fd9fd02f8ff5804ae672c15ac">XVtc_Disable</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u32 Type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#fe5c4a27d13ca8b7011a0dba2245bf93">XVtc_SetPolarity</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___polarity.html">XVtc_Polarity</a> *PolarityPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#6c2db7f90bcef1dc01954ccf7579ff98">XVtc_GetPolarity</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___polarity.html">XVtc_Polarity</a> *PolarityPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#303989352607276682feb838aed85211">XVtc_SetSource</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___source_select.html">XVtc_SourceSelect</a> *SourcePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#71a154d15d544db6f75e25b3132bf774">XVtc_GetSource</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___source_select.html">XVtc_SourceSelect</a> *SourcePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#04ea1388abb9e74b668c4e4307a5f190">XVtc_SetSkipLine</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int GeneratorChromaSkip)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#26f5dfbd917ee8e4cdae22e81df9bc4c">XVtc_GetSkipLine</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int *GeneratorChromaSkipPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#a78d6393095b1d9c9ee6685d8d9883d9">XVtc_SetSkipPixel</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int GeneratorChromaSkip)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#302dc0a7ab9c2452a75cb07b7052f627">XVtc_GetSkipPixel</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int *GeneratorChromaSkipPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#2f5db507f747a961b51626ce7942de66">XVtc_SetGenerator</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *SignalCfgPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#afd7fc5c1b9e69ddd6a9348571bf03dd">XVtc_GetGenerator</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *SignalCfgPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#43cd5b468e35fc36995868e4f5fcb59c">XVtc_GetDetector</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *SignalCfgPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#5a623771933d2330f226b819ba5dc0b5">XVtc_SetDelay</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int VertDelay, int HoriDelay)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#df5b228b819ea9b645fec7c75e965a70">XVtc_GetDelay</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, int *VertDelayPtr, int *HoriDelayPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#86c0bc8def549aefd6f82b68dd9be9f1">XVtc_SetFSync</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u16 FrameSyncIndex, u16 VertStart, u16 HoriStart)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#33a1d9df5f2129f68ee00b03e2a7aa18">XVtc_GetFSync</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u16 FrameSyncIndex, u16 *VertStartPtr, u16 *HoriStartPtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#c841e6cba15593fd069a86268fa946ce">XVtc_SetGeneratorHoriOffset</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *HoriOffset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#3535b299b375eafd68ebfa3e4765f30d">XVtc_GetGeneratorHoriOffset</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *HoriOffset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#38ef22a2e5c11698c6d396538777db1d">XVtc_GetDetectorHoriOffset</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, <a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *HoriOffset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#93deb6b7cf1b4f69d8d7674689eb83d3">XVtc_GetVersion</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u16 *Major, u16 *Minor, u16 *Revision)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="struct_x_vtc___config.html">XVtc_Config</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#3963ccd7235e286987f134bd9046b550">XVtc_LookupConfig</a> (u16 DeviceId)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#8dd2c6eddcc006be353b46e96ff6c311">XVtc_IntrHandler</a> (void *InstancePtr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="xvtc_8h.html#4b7f7286b4e91bed98627ef691d90a08">XVtc_SetCallBack</a> (<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u32 IntrType, void *CallBackFunc, void *CallBackRef)</td></tr>

</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="60284143c79794ee7bc744aceac0bdab"></a><!-- doxytag: member="xvtc.h::XVtc_DisableSync" ref="60284143c79794ee7bc744aceac0bdab" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_DisableSync          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro disables synchronization of the Generator with the Detector on the given VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: void <a class="el" href="xvtc_8h.html#60284143c79794ee7bc744aceac0bdab">XVtc_DisableSync(XVtc *InstancePtr)</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="6a80d13c82763b5842b46c05d63dfdbe"></a><!-- doxytag: member="xvtc.h::XVTC_EN_DETECTOR" ref="6a80d13c82763b5842b46c05d63dfdbe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_EN_DETECTOR          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
To enable detector 
</div>
</div><p>
<a class="anchor" name="0bdf216441e84c3f9e8f4ffbb507cf84"></a><!-- doxytag: member="xvtc.h::XVTC_EN_GENERATOR" ref="0bdf216441e84c3f9e8f4ffbb507cf84" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_EN_GENERATOR          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
To enable generator 
</div>
</div><p>
<a class="anchor" name="e5e55c24d1ae96c70257b5f12a35392b"></a><!-- doxytag: member="xvtc.h::XVtc_EnableSync" ref="e5e55c24d1ae96c70257b5f12a35392b" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_EnableSync          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro enables synchronization of the Generator with the Detector on the given VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: void <a class="el" href="xvtc_8h.html#e5e55c24d1ae96c70257b5f12a35392b">XVtc_EnableSync(XVtc *InstancePtr)</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="d29ad37d83130344e671b42cf192d4a4"></a><!-- doxytag: member="xvtc.h::XVtc_GetDetectionStatus" ref="d29ad37d83130344e671b42cf192d4a4" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_GetDetectionStatus          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the status of the Detector in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The Detector Status. Use XVTC_DS_* in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> to interpret the returned value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: u32 <a class="el" href="xvtc_8h.html#d29ad37d83130344e671b42cf192d4a4">XVtc_GetDetectionStatus(XVtc *InstancePtr)</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="df093fd75bbafb2010ca07eba57183fa"></a><!-- doxytag: member="xvtc.h::XVTC_HANDLER_DETECTOR" ref="df093fd75bbafb2010ca07eba57183fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_HANDLER_DETECTOR          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A detector event interrupt type 
</div>
</div><p>
<a class="anchor" name="78fda648694107b89c5b4af1d0da0171"></a><!-- doxytag: member="xvtc.h::XVTC_HANDLER_ERROR" ref="78fda648694107b89c5b4af1d0da0171" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_HANDLER_ERROR          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
An error condition interrupt type 
</div>
</div><p>
<a class="anchor" name="93bb5bfd71a7156833af501b526bc8a4"></a><!-- doxytag: member="xvtc.h::XVTC_HANDLER_FRAMESYNC" ref="93bb5bfd71a7156833af501b526bc8a4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_HANDLER_FRAMESYNC          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A frame sync event interrupt type 
</div>
</div><p>
<a class="anchor" name="17896f1c7cad6dd27c55cf7d6a374815"></a><!-- doxytag: member="xvtc.h::XVTC_HANDLER_GENERATOR" ref="17896f1c7cad6dd27c55cf7d6a374815" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_HANDLER_GENERATOR          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A generator event interrupt type 
</div>
</div><p>
<a class="anchor" name="73af3bfd88d97a639ded872ce1dd1f45"></a><!-- doxytag: member="xvtc.h::XVTC_HANDLER_LOCK" ref="73af3bfd88d97a639ded872ce1dd1f45" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVTC_HANDLER_LOCK          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A signal lock event interrupt type 
</div>
</div><p>
<a class="anchor" name="f695aa364748f491a96e067b7dac03f7"></a><!-- doxytag: member="xvtc.h::XVtc_IntrClear" ref="f695aa364748f491a96e067b7dac03f7" args="(InstancePtr, IntrType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrClear          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr,         <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IntrType&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro clears/acknowledges pending interrupts of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>IntrType</em>&nbsp;</td><td>is the pending interrupts to clear/acknowledge. Use OR'ing of XVTC_IXR_* constants defined in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> to create this parameter value.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd></dd></dl>
C-style signature: void <a class="el" href="xvtc_8h.html#f695aa364748f491a96e067b7dac03f7">XVtc_IntrClear(XVtc *InstancePtr, u32 IntrType)</a> 
</div>
</div><p>
<a class="anchor" name="91e4d54ebf6934f4ffe64ab6fc8130b5"></a><!-- doxytag: member="xvtc.h::XVtc_IntrDisable" ref="91e4d54ebf6934f4ffe64ab6fc8130b5" args="(InstancePtr, IntrType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrDisable          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr,         <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IntrType&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro disables individual interrupts of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>IntrType</em>&nbsp;</td><td>is the type of the interrupts to disable. Use OR'ing of XVTC_IXR_* constants defined in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> to create this parameter value.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd></dd></dl>
Any other interrupt not covered by parameter IntrType, if enabled before this macro is called, will remain enabled.<p>
C-style signature: void <a class="el" href="xvtc_8h.html#91e4d54ebf6934f4ffe64ab6fc8130b5">XVtc_IntrDisable(XVtc *InstancePtr, u32 IntrType)</a> 
</div>
</div><p>
<a class="anchor" name="3a34dc0b1bf0d711da36f2c5689208b2"></a><!-- doxytag: member="xvtc.h::XVtc_IntrDisableGlobal" ref="3a34dc0b1bf0d711da36f2c5689208b2" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrDisableGlobal          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro disables the global interrupt on a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: void <a class="el" href="xvtc_8h.html#3a34dc0b1bf0d711da36f2c5689208b2">XVtc_IntrDisableGlobal(XVtc *InstancePtr)</a>; </dd></dl>

</div>
</div><p>
<a class="anchor" name="cd0e0323f3ad893d2192d4c8a0075e48"></a><!-- doxytag: member="xvtc.h::XVtc_IntrEnable" ref="cd0e0323f3ad893d2192d4c8a0075e48" args="(InstancePtr, IntrType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrEnable          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr,         <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IntrType&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro enables individual interrupts of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>IntrType</em>&nbsp;</td><td>is the type of the interrupts to enable. Use OR'ing of XVTC_IXR_* constants defined in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> to create this parameter value.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd></dd></dl>
The existing enabled interrupt(s) will remain enabled.<p>
C-style signature: void <a class="el" href="xvtc_8h.html#cd0e0323f3ad893d2192d4c8a0075e48">XVtc_IntrEnable(XVtc *InstancePtr, u32 IntrType)</a> 
</div>
</div><p>
<a class="anchor" name="02261b40383782a6c2aed8549853e5e0"></a><!-- doxytag: member="xvtc.h::XVtc_IntrEnableGlobal" ref="02261b40383782a6c2aed8549853e5e0" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrEnableGlobal          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro enables the global interrupt on a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: void <a class="el" href="xvtc_8h.html#02261b40383782a6c2aed8549853e5e0">XVtc_IntrEnableGlobal(XVtc *InstancePtr)</a>; </dd></dl>

</div>
</div><p>
<a class="anchor" name="dcef48015b5a2e32dfc3562b9aef6cb7"></a><!-- doxytag: member="xvtc.h::XVtc_IntrGetPending" ref="dcef48015b5a2e32dfc3562b9aef6cb7" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrGetPending          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro returns the pending interrupts of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The pending interrupts of the VTC. Use XVTC_IXR_* constants defined in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> to interpret this value.</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd></dd></dl>
C-style signature: u32 <a class="el" href="xvtc_8h.html#dcef48015b5a2e32dfc3562b9aef6cb7">XVtc_IntrGetPending(XVtc *InstancePtr)</a> 
</div>
</div><p>
<a class="anchor" name="5bf6e640406831d79bcb88cca274a38f"></a><!-- doxytag: member="xvtc.h::XVtc_IntrSetLockPolarity" ref="5bf6e640406831d79bcb88cca274a38f" args="(InstancePtr, LockPolarity)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_IntrSetLockPolarity          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr,         <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">LockPolarity&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro sets the edge at which the following interrupts trigger:<ul>
<li>XVTC_IXR_ACL_MASK</li><li>XVTC_IXR_AVL_MASK</li><li>XVTC_IXR_FIL_MASK</li><li>XVTC_IXR_VBL_MASK</li><li>XVTC_IXR_VSL_MASK</li><li>XVTC_IXR_HBL_MASK</li><li>XVTC_IXR_HSL_MASK</li></ul>
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>LockPolarity</em>&nbsp;</td><td>indicates the edge at which the interrupts above trigger. Use any non-0 for triggering on rising edge of lock. Use 0 for triggering on falling edge of lock.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd></dd></dl>
C-style signature: void XVtc_IntrSetLockPolarity(<a class="el" href="struct_x_vtc.html">XVtc</a> *InstancePtr, u32 LockPolarity) 
</div>
</div><p>
<a class="anchor" name="303ddf412ad5669e307670c9b2614ae6"></a><!-- doxytag: member="xvtc.h::XVtc_Reset" ref="303ddf412ad5669e307670c9b2614ae6" args="(InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define XVtc_Reset          </td>
          <td>(</td>
          <td class="paramtype">InstancePtr&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This macro resets a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>C-style signature: void <a class="el" href="xvtc_8h.html#303ddf412ad5669e307670c9b2614ae6">XVtc_Reset(XVtc *InstancePtr)</a> </dd></dl>

</div>
</div><p>
<hr><h2>Typedef Documentation</h2>
<a class="anchor" name="c3ad54c700878dca76cb9529452c20d4"></a><!-- doxytag: member="xvtc.h::XVtc_CallBack" ref="c3ad54c700878dca76cb9529452c20d4" args="(void *CallBackRef, u32 Mask)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(*) <a class="el" href="xvtc_8h.html#c3ad54c700878dca76cb9529452c20d4">XVtc_CallBack</a>(void *CallBackRef, u32 Mask)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Callback type for all interrupts except error interrupt.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>CallBackRef</em>&nbsp;</td><td>is a callback reference passed in by the upper layer when setting the callback functions, and passed back to the upper layer when the callback is invoked. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Mask</em>&nbsp;</td><td>is a bit mask indicating the cause of the event. For current device version, this parameter is "OR" of 0 or more XVTC_IXR_* constants defined in <a class="el" href="xvtc__hw_8h.html">xvtc_hw.h</a> </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="1fbd82cca1f8f904973c2560a23201c0"></a><!-- doxytag: member="xvtc.h::XVtc_ErrorCallBack" ref="1fbd82cca1f8f904973c2560a23201c0" args="(void *CallBackRef, u32 ErrorMask)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(*) <a class="el" href="xvtc_8h.html#1fbd82cca1f8f904973c2560a23201c0">XVtc_ErrorCallBack</a>(void *CallBackRef, u32 ErrorMask)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Callback type for Error interrupt.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>CallBackRef</em>&nbsp;</td><td>is a callback reference passed in by the upper layer when setting the callback functions, and passed back to the upper layer when the callback is invoked. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ErrorMask</em>&nbsp;</td><td>is a bit mask indicating the cause of the error. For current device version, this parameter always have value 0 and could be ignored. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="8087baee1e4a76f1c61ec1d19bc04e4f"></a><!-- doxytag: member="xvtc.h::XVtc_CfgInitialize" ref="8087baee1e4a76f1c61ec1d19bc04e4f" args="(XVtc *InstancePtr, XVtc_Config *CfgPtr, u32 EffectiveAddr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XVtc_CfgInitialize           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___config.html">XVtc_Config</a> *&nbsp;</td>
          <td class="paramname"> <em>CfgPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&nbsp;</td>
          <td class="paramname"> <em>EffectiveAddr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function initializes a VTC device. This function must be called prior to using a VTC device. Initialization of a VTC includes setting up the instance data, and ensuring the hardware is in a quiescent state.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>CfgPtr</em>&nbsp;</td><td>points to the configuration structure associated with the VTC device. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>EffectiveAddr</em>&nbsp;</td><td>is the base address of the device. If address translation is being used, then this parameter must reflect the virtual base address. Otherwise, the physical address should be used. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>XST_SUCCESS </dd></dl>

</div>
</div><p>
<a class="anchor" name="7084ab1fd9fd02f8ff5804ae672c15ac"></a><!-- doxytag: member="xvtc.h::XVtc_Disable" ref="7084ab1fd9fd02f8ff5804ae672c15ac" args="(XVtc *InstancePtr, u32 Type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_Disable           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&nbsp;</td>
          <td class="paramname"> <em>Type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function disables a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Type</em>&nbsp;</td><td>indicates which module (Detector and/or Generator) to disable. Valid values could be obtained by bit ORing of XVTC_EN_DETECTOR and XVTC_EN_GENERATOR </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="39c8b6449b73e50cdeedaec31f17236c"></a><!-- doxytag: member="xvtc.h::XVtc_Enable" ref="39c8b6449b73e50cdeedaec31f17236c" args="(XVtc *InstancePtr, u32 Type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_Enable           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&nbsp;</td>
          <td class="paramname"> <em>Type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function enables a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Type</em>&nbsp;</td><td>indicates which module (Detector and/or Generator) to enable. Valid values could be obtained by bit ORing of XVTC_EN_DETECTOR and XVTC_EN_GENERATOR. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="df5b228b819ea9b645fec7c75e965a70"></a><!-- doxytag: member="xvtc.h::XVtc_GetDelay" ref="df5b228b819ea9b645fec7c75e965a70" args="(XVtc *InstancePtr, int *VertDelayPtr, int *HoriDelayPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetDelay           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>VertDelayPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>HoriDelayPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the Generator delay setting used by a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>VertDelayPtr</em>&nbsp;</td><td>will point to a value indicating the number of total lines per frame to delay the generator output after this function returns. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriDelayPtr</em>&nbsp;</td><td>will point to a value indicating the number of total clock cycles per line to delay the generator output after this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="43cd5b468e35fc36995868e4f5fcb59c"></a><!-- doxytag: member="xvtc.h::XVtc_GetDetector" ref="43cd5b468e35fc36995868e4f5fcb59c" args="(XVtc *InstancePtr, XVtc_Signal *SignalCfgPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetDetector           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *&nbsp;</td>
          <td class="paramname"> <em>SignalCfgPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the VTC signal setting used by the Detector module in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SignalCfgPtr</em>&nbsp;</td><td>is a pointer to a VTC signal configuration which will be populated with the setting used by the Detector module in the VTC device once this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="38ef22a2e5c11698c6d396538777db1d"></a><!-- doxytag: member="xvtc.h::XVtc_GetDetectorHoriOffset" ref="38ef22a2e5c11698c6d396538777db1d" args="(XVtc *InstancePtr, XVtc_HoriOffsets *HoriOffset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetDetectorHoriOffset           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *&nbsp;</td>
          <td class="paramname"> <em>HoriOffsets</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the VBlank/VSync Horizontal Offsets detected by the Detector in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriOffsets</em>&nbsp;</td><td>points to a VBlank/VSync Horizontal Offset configuration structure that will be populated with the setting detected on the Detector in the given VTC device after this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="33a1d9df5f2129f68ee00b03e2a7aa18"></a><!-- doxytag: member="xvtc.h::XVtc_GetFSync" ref="33a1d9df5f2129f68ee00b03e2a7aa18" args="(XVtc *InstancePtr, u16 FrameSyncIndex, u16 *VertStartPtr, u16 *HoriStartPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetFSync           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>FrameSyncIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>VertStartPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>HoriStartPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the SYNC setting of a Frame Sync used by VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>FrameSyncIndex</em>&nbsp;</td><td>indicates the index number of the frame sync. The valid range is from 0 to 15. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>VertStartPtr</em>&nbsp;</td><td>will point to the value that indicates the vertical line count during which the Frame Sync is active once this function returns. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriStartPtr</em>&nbsp;</td><td>will point to the value that indicates the horizontal cycle count during which the Frame Sync is active once this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="afd7fc5c1b9e69ddd6a9348571bf03dd"></a><!-- doxytag: member="xvtc.h::XVtc_GetGenerator" ref="afd7fc5c1b9e69ddd6a9348571bf03dd" args="(XVtc *InstancePtr, XVtc_Signal *SignalCfgPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetGenerator           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *&nbsp;</td>
          <td class="paramname"> <em>SignalCfgPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the VTC signal setting used by the Generator module in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SignalCfgPtr</em>&nbsp;</td><td>is a pointer to a VTC signal configuration which will be populated with the setting used by the Generator module in the VTC device once this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3535b299b375eafd68ebfa3e4765f30d"></a><!-- doxytag: member="xvtc.h::XVtc_GetGeneratorHoriOffset" ref="3535b299b375eafd68ebfa3e4765f30d" args="(XVtc *InstancePtr, XVtc_HoriOffsets *HoriOffset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetGeneratorHoriOffset           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *&nbsp;</td>
          <td class="paramname"> <em>HoriOffsets</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the VBlank/VSync Horizontal Offsets currently used by the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriOffsets</em>&nbsp;</td><td>points to a VBlank/VSync Horizontal Offset configuration structure that will be populated with the setting currently used on the Generator in the given VTC device after this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="6c2db7f90bcef1dc01954ccf7579ff98"></a><!-- doxytag: member="xvtc.h::XVtc_GetPolarity" ref="6c2db7f90bcef1dc01954ccf7579ff98" args="(XVtc *InstancePtr, XVtc_Polarity *PolarityPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetPolarity           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___polarity.html">XVtc_Polarity</a> *&nbsp;</td>
          <td class="paramname"> <em>PolarityPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the output polarity setting used by a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>PolarityPtr</em>&nbsp;</td><td>points to a Polarity configuration structure that will be populated with the setting used on the VTC device after this function returns. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="26f5dfbd917ee8e4cdae22e81df9bc4c"></a><!-- doxytag: member="xvtc.h::XVtc_GetSkipLine" ref="26f5dfbd917ee8e4cdae22e81df9bc4c" args="(XVtc *InstancePtr, int *GeneratorChromaSkipPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetSkipLine           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>GeneratorChromaSkipPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the line skip setting used by the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>GeneratorChromaSkipPtr</em>&nbsp;</td><td>will point to the value indicating whether 1 line is skipped between active chroma for the Generator module after this function returns. value 1 means that 1 line is skipped, and 0 means that no lines are skipped </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="302dc0a7ab9c2452a75cb07b7052f627"></a><!-- doxytag: member="xvtc.h::XVtc_GetSkipPixel" ref="302dc0a7ab9c2452a75cb07b7052f627" args="(XVtc *InstancePtr, int *GeneratorChromaSkipPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetSkipPixel           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>GeneratorChromaSkipPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the pixel skip setting used by the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>GeneratorChromaSkipPtr</em>&nbsp;</td><td>will point to the value indicating whether 1 pixel is skipped between active chroma for the Generator module after this function returns. value 1 means that 1 pixel is skipped, and 0 means that no pixels are skipped </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="71a154d15d544db6f75e25b3132bf774"></a><!-- doxytag: member="xvtc.h::XVtc_GetSource" ref="71a154d15d544db6f75e25b3132bf774" args="(XVtc *InstancePtr, XVtc_SourceSelect *SourcePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetSource           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___source_select.html">XVtc_SourceSelect</a> *&nbsp;</td>
          <td class="paramname"> <em>SourcePtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function gets the source select setting used by a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SourcePtr</em>&nbsp;</td><td>points to a source select configuration structure that will be populated with the setting used on the VTC device after this function returns </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE </dd></dl>

</div>
</div><p>
<a class="anchor" name="93deb6b7cf1b4f69d8d7674689eb83d3"></a><!-- doxytag: member="xvtc.h::XVtc_GetVersion" ref="93deb6b7cf1b4f69d8d7674689eb83d3" args="(XVtc *InstancePtr, u16 *Major, u16 *Minor, u16 *Revision)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_GetVersion           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>Major</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>Minor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>Revision</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function returns the version of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Major</em>&nbsp;</td><td>points to an unsigned 16-bit variable that will be assigned with the major version number after this function returns. Value range is from 0x0 to 0xF. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Minor</em>&nbsp;</td><td>points to an unsigned 16-bit variable that will be assigned with the minor version number after this function returns. Value range is from 0x00 to 0xFF. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Revision</em>&nbsp;</td><td>points to an unsigned 16-bit variable that will be assigned with the revision version number after this function returns. Value range is from 0xA to 0xF. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None. </dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Example: Device version should read v2.01.c if major version number is 0x2, minor version number is 0x1, and revision version number is 0xC. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8dd2c6eddcc006be353b46e96ff6c311"></a><!-- doxytag: member="xvtc.h::XVtc_IntrHandler" ref="8dd2c6eddcc006be353b46e96ff6c311" args="(void *InstancePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_IntrHandler           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function is the interrupt handler for the VTC driver.<p>
This handler reads the pending interrupt from the IER/ISR, determines the source of the interrupts, calls according callbacks, and finally clears the interrupts.<p>
The application is responsible for connecting this function to the interrupt system. Application beyond this driver is also responsible for providing callbacks to handle interrupts and installing the callbacks using <a class="el" href="xvtc_8h.html#4b7f7286b4e91bed98627ef691d90a08">XVtc_SetCallBack()</a> during initialization phase. An example delivered with this driver demonstrates how this could be done.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the <a class="el" href="struct_x_vtc.html">XVtc</a> instance that just interrupted. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>None. </dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>None. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3963ccd7235e286987f134bd9046b550"></a><!-- doxytag: member="xvtc.h::XVtc_LookupConfig" ref="3963ccd7235e286987f134bd9046b550" args="(u16 DeviceId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_x_vtc___config.html">XVtc_Config</a>* XVtc_LookupConfig           </td>
          <td>(</td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>DeviceId</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
XVtc_LookupConfig returns a reference to an <a class="el" href="struct_x_vtc___config.html">XVtc_Config</a> structure based on the unique device id, <em>DeviceId</em>. The return value will refer to an entry in the device configuration table defined in the <a class="el" href="xvtc__g_8c.html">xvtc_g.c</a> file.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>DeviceId</em>&nbsp;</td><td>is the unique device ID of the device for the lookup operation.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>XVtc_LookupConfig returns a reference to a config record in the configuration table (in <a class="el" href="xvtc__g_8c.html">xvtc_g.c</a>) corresponding to <em>DeviceId</em>, or NULL if no match is found. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4b7f7286b4e91bed98627ef691d90a08"></a><!-- doxytag: member="xvtc.h::XVtc_SetCallBack" ref="4b7f7286b4e91bed98627ef691d90a08" args="(XVtc *InstancePtr, u32 IntrType, void *CallBackFunc, void *CallBackRef)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XVtc_SetCallBack           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&nbsp;</td>
          <td class="paramname"> <em>HandlerType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>CallBackFunc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>CallBackRef</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This routine installs an asynchronous callback function for the given HandlerType:<p>
<pre>
 HandlerType		   Callback Function Type
 -----------------------  ---------------------------
 XVTC_HANDLER_FRAMESYNC   XVtc_FrameSyncCallBack
 XVTC_HANDLER_LOCK	   XVtc_LockCallBack
 XVTC_HANDLER_DETECTOR	   XVtc_DetectorCallBack
 XVTC_HANDLER_GENERATOR   XVtc_GeneratorCallBack
 XVTC_HANDLER_ERROR	   XVtc_ErrCallBack</pre><p>
<pre> HandlerType		   Invoked by this driver when:
 -----------------------  --------------------------------------------------
 XVTC_HANDLER_FRAMESYNC   A frame sync event happens
 XVTC_HANDLER_LOCK	   A signal lock event happens
 XVTC_HANDLER_DETECTOR	   A detector related event happens
 XVTC_HANDLER_GENERATOR   A generator related event happens
 XVTC_HANDLER_ERROR	   An error condition happens</pre><p>
<pre> </pre><p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the <a class="el" href="struct_x_vtc.html">XVtc</a> instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HandlerType</em>&nbsp;</td><td>specifies which callback is to be attached. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>CallbackFunc</em>&nbsp;</td><td>is the address of the callback function. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>CallbackRef</em>&nbsp;</td><td>is a user data item that will be passed to the callback function when it is invoked.</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd><ul>
<li>XST_SUCCESS when handler is installed.</li><li>XST_INVALID_PARAM when HandlerType is invalid.</li></ul>
</dd></dl>
<dl compact><dt><b>Note:</b></dt><dd>Invoking this function for a handler that already has been installed replaces it with the new handler. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5a623771933d2330f226b819ba5dc0b5"></a><!-- doxytag: member="xvtc.h::XVtc_SetDelay" ref="5a623771933d2330f226b819ba5dc0b5" args="(XVtc *InstancePtr, int VertDelay, int HoriDelay)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetDelay           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>VertDelay</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>HoriDelay</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the Generator delay setting of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>VertDelay</em>&nbsp;</td><td>indicates the number of total lines per frame to delay the generator output. The valid range is from 0 to 4095. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriDelay</em>&nbsp;</td><td>indicates the number of total clock cycles per line to delay the generator output. The valid range is from 0 to 4095. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="86c0bc8def549aefd6f82b68dd9be9f1"></a><!-- doxytag: member="xvtc.h::XVtc_SetFSync" ref="86c0bc8def549aefd6f82b68dd9be9f1" args="(XVtc *InstancePtr, u16 FrameSyncIndex, u16 VertStart, u16 HoriStart)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetFSync           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>FrameSyncIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>VertStart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>HoriStart</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the SYNC setting of a Frame Sync used by VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>FrameSyncIndex</em>&nbsp;</td><td>indicates the index number of the frame sync. The valid range is from 0 to 15. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>VertStart</em>&nbsp;</td><td>indicates the vertical line count during which the Frame Sync is active. The valid range is from 0 to 4095. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriStart</em>&nbsp;</td><td>indicates the horizontal cycle count during which the Frame Sync is active. The valid range is from 0 to 4095. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="2f5db507f747a961b51626ce7942de66"></a><!-- doxytag: member="xvtc.h::XVtc_SetGenerator" ref="2f5db507f747a961b51626ce7942de66" args="(XVtc *InstancePtr, XVtc_Signal *SignalCfgPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetGenerator           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___signal.html">XVtc_Signal</a> *&nbsp;</td>
          <td class="paramname"> <em>SignalCfgPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up VTC signal to be used by the Generator module in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SignalCfgPtr</em>&nbsp;</td><td>is a pointer to the VTC signal configuration to be used by the Generator module in the VTC device. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="c841e6cba15593fd069a86268fa946ce"></a><!-- doxytag: member="xvtc.h::XVtc_SetGeneratorHoriOffset" ref="c841e6cba15593fd069a86268fa946ce" args="(XVtc *InstancePtr, XVtc_HoriOffsets *HoriOffset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetGeneratorHoriOffset           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___hori_offsets.html">XVtc_HoriOffsets</a> *&nbsp;</td>
          <td class="paramname"> <em>HoriOffsets</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets the VBlank/VSync Horizontal Offsets for the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>HoriOffsets</em>&nbsp;</td><td>points to a VBlank/VSync Horizontal Offset configuration with the setting to use on the VTC device. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="fe5c4a27d13ca8b7011a0dba2245bf93"></a><!-- doxytag: member="xvtc.h::XVtc_SetPolarity" ref="fe5c4a27d13ca8b7011a0dba2245bf93" args="(XVtc *InstancePtr, XVtc_Polarity *PolarityPtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetPolarity           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___polarity.html">XVtc_Polarity</a> *&nbsp;</td>
          <td class="paramname"> <em>PolarityPtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the output polarity of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>PolarityPtr</em>&nbsp;</td><td>points to a Polarity configuration structure w/ the setting to use on the VTC device. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="04ea1388abb9e74b668c4e4307a5f190"></a><!-- doxytag: member="xvtc.h::XVtc_SetSkipLine" ref="04ea1388abb9e74b668c4e4307a5f190" args="(XVtc *InstancePtr, int GeneratorChromaSkip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetSkipLine           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>GeneratorChromaSkip</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the line skip setting of the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>GeneratorChromaSkip</em>&nbsp;</td><td>indicates whether to skip 1 line between active chroma for the Generator module. Use Non-0 value for this parameter to skip 1 line, and 0 to not skip lines </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="a78d6393095b1d9c9ee6685d8d9883d9"></a><!-- doxytag: member="xvtc.h::XVtc_SetSkipPixel" ref="a78d6393095b1d9c9ee6685d8d9883d9" args="(XVtc *InstancePtr, int GeneratorChromaSkip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetSkipPixel           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>GeneratorChromaSkip</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the pixel skip setting of the Generator in a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>GeneratorChromaSkip</em>&nbsp;</td><td>indicates whether to skip 1 pixel between active chroma for the Generator module. Use Non-0 value for this parameter to skip 1 pixel, and 0 to not skip pixels </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<a class="anchor" name="303989352607276682feb838aed85211"></a><!-- doxytag: member="xvtc.h::XVtc_SetSource" ref="303989352607276682feb838aed85211" args="(XVtc *InstancePtr, XVtc_SourceSelect *SourcePtr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XVtc_SetSource           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_x_vtc.html">XVtc</a> *&nbsp;</td>
          <td class="paramname"> <em>InstancePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_x_vtc___source_select.html">XVtc_SourceSelect</a> *&nbsp;</td>
          <td class="paramname"> <em>SourcePtr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function sets up the source selecting of a VTC device.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>InstancePtr</em>&nbsp;</td><td>is a pointer to the VTC device instance to be worked on </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SourcePtr</em>&nbsp;</td><td>points to a Source Selecting configuration structure with the setting to use on the VTC device. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NONE. </dd></dl>

</div>
</div><p>
<p class="Copyright">
Copyright &copy; 1995-2011 Xilinx, Inc. All rights reserved.
</p>
</body>
</html>


#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : v_tc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN v_tc

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION PAY_CORE = v_tc@2012.07
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = Video Timing Controller
OPTION LONG_DESC = Configurable video timing generator and detector for blanks syncs and active video
OPTION IP_GROUP = Video and Image Processing:MICROBLAZE:ARM
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, artix7l=PRE_PRODUCTION)
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = XSVI_IN, BUS_TYPE = TARGET, BUS_STD = XSVI, ISVALID = ((C_INTERFACE_TYPE == 1) && (C_DETECT_EN == 1))
BUS_INTERFACE BUS = XSVI_OUT, BUS_TYPE = INITIATOR, BUS_STD = XSVI, ISVALID = ((C_INTERFACE_TYPE == 1) && (C_GENERATE_EN == 1))
BUS_INTERFACE BUS = VTIMING_IN, BUS_TYPE = TARGET, BUS_STD = VTIMING, ISVALID = ((C_INTERFACE_TYPE == 0) && (C_DETECT_EN == 1))
BUS_INTERFACE BUS = VTIMING_OUT, BUS_TYPE = INITIATOR, BUS_STD = VTIMING, ISVALID = ((C_INTERFACE_TYPE == 0) && (C_GENERATE_EN == 1))

## Generics for VHDL or Parameters for Verilog
PARAMETER C_GEN_AUTO_SWITCH = 1, DT = integer, RANGE = (0,1), ISVALID = ((C_GENERATE_EN == 1) && (C_DETECT_EN == 1))
PARAMETER C_MAX_PIXELS = 4096, DT = integer, RANGE = (128,256,512,1024,2048,4096,8192)
PARAMETER C_MAX_LINES = 4096, DT = integer, RANGE = (128,256,512,1024,2048,4096,8192)
PARAMETER C_NUM_FSYNCS = 1, DT = integer, RANGE = (1:16), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_DETECT_EN = 0, DT = integer, RANGE = (0,1)
PARAMETER C_GENERATE_EN = 1, DT = integer, RANGE = (0,1)
PARAMETER C_DET_HSYNC_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_DET_VSYNC_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_DET_HBLANK_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_DET_VBLANK_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_DET_AVIDEO_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_DET_ACHROMA_EN = 0, DT = integer, RANGE = (0,1), ISVALID = (C_DETECT_EN == 1)
PARAMETER C_GEN_HSYNC_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_GEN_VSYNC_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_GEN_HBLANK_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_GEN_VBLANK_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_GEN_AVIDEO_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_GEN_ACHROMA_EN = 1, DT = integer, RANGE = (0,1), ISVALID = (C_GENERATE_EN == 1)
PARAMETER C_INTERFACE_TYPE = 0, DT = integer, RANGE = (0,1), TYPE = NON_HDL
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, BUS = S_AXI, VALUES = (AXI4LITE=AXI4LITE, AXI4=AXI4), TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, RANGE = (1:16), TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x00200, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_ADDR_WIDTH = 9, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_CLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ
PARAMETER C_FAMILY = virtex7, DT = STRING

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ACLKEN = net_vcc, DIR = I, SIGIS = CLK, INITIALVAL = VCC
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT irq = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT vblank_in = vblank, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_VBLANK_EN == 1))
PORT vsync_in = vsync, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_VSYNC_EN == 1))
PORT hblank_in = hblank, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_HBLANK_EN == 1))
PORT hsync_in = hsync, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_HSYNC_EN == 1))
PORT active_video_in = active_video, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_AVIDEO_EN == 1))
PORT active_chroma_in = active_chroma, DIR = I, BUS = VTIMING_IN:XSVI_IN, ISVALID = ((C_DETECT_EN == 1) && (C_DET_ACHROMA_EN == 1))
PORT vblank_out = vblank, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_VBLANK_EN == 1))
PORT vsync_out = vsync, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_VSYNC_EN == 1))
PORT hblank_out = hblank, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_HBLANK_EN == 1))
PORT hsync_out = hsync, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_HSYNC_EN == 1))
PORT active_video_out = active_video, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_AVIDEO_EN == 1))
PORT active_chroma_out = active_chroma, DIR = O, BUS = VTIMING_OUT:XSVI_OUT, ISVALID = ((C_GENERATE_EN == 1) && (C_GEN_ACHROMA_EN == 1))
PORT fsync_out = "", DIR = O, VEC = [C_NUM_FSYNCS-1:0], ISVALID = (C_GENERATE_EN == 1)
PORT clk = "", DIR = I, SIGIS = CLK, BUS = VTIMING_IN:XSVI_IN:VTIMING_OUT:XSVI_OUT, ASSIGNMENT = REQUIRE
PORT resetn = net_vcc, DIR = I, INITIALVAL = VCC, SIGIS = RST, BUS = VTIMING_IN:XSVI_IN:VTIMING_OUT:XSVI_OUT, ASSIGNMENT = REQUIRE
PORT clken = net_vcc, DIR = I, INITIALVAL = VCC
PORT det_clken = net_vcc, DIR = I, INITIALVAL = VCC, BUS = VTIMING_IN:XSVI_IN
PORT gen_clken = net_vcc, DIR = I, INITIALVAL = VCC, BUS = VTIMING_OUT:XSVI_OUT
PORT fsync_in = net_gnd, DIR = I, INITIALVAL = GND

END

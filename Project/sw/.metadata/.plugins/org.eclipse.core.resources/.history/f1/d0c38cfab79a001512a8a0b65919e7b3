/*****************************************************************************
 * Joseph Zambreno
 * Phillip Jones
 *
 * Department of Electrical and Computer Engineering
 * Iowa State University
 *****************************************************************************/

/*****************************************************************************
 * fmc_imageon_utils.c - main initialization and configuration routines
 * for the Avnet FMC-IMAGEON board. Most of the bugs are their fault.
 *
 *
 * NOTES:
 * 02/04/14 by JAZ::Design created.
 *****************************************************************************/

#include "camera_app.h"


// Main FMC-IMAGEON initialization function. Add your code here.
int fmc_imageon_enable( camera_config_t *config )
{
   int ret;

   xil_printf("\n\r");
   xil_printf("------------------------------------------------\n\r");
   xil_printf("--    FMC-IMAGEON Camera Application (MP-2)   --\n\r");
   xil_printf("------------------------------------------------\n\r");
   xil_printf("\n\r");

   config->bVerbose = 1;
   config->vita_aec = 0;       // off
   config->vita_again = 0;     // 1.0
   config->vita_dgain = 128;   // 1.0
   config->vita_exposure = 90; // 90% of frame period


   xil_printf("FMC-IPMI Initialization ...\n\r");
   ret = fmc_iic_axi_init(&(config->fmc_ipmi_iic), "FMC-IPMI I2C Controller", config->uBaseAddr_IIC_FmcIpmi);
   if (!ret ) {
      xil_printf("ERROR: Failed to open FMC-IIC driver,\n\r");
      exit(1);
   }


   // FMC Module Validation
   if (fmc_ipmi_detect(&(config->fmc_ipmi_iic), "FMC-IMAGEON", FMC_ID_ALL)) {
      fmc_ipmi_enable( &(config->fmc_ipmi_iic), FMC_ID_SLOT1 );
   }
   else {
	   xil_printf("ERROR: Failed to validate FMC-IPMI I2C Controller.\n\r");
       exit(1);
   }


   xil_printf("FMC-IMAGEON I2C Initialization ...\n\r");
   ret = fmc_iic_axi_init(&(config->fmc_imageon_iic), "FMC-IMAGEON I2C Controller", config->uBaseAddr_IIC_FmcImageon);
   if (!ret) {
      xil_printf( "ERROR: Failed to open FMC-IIC driver\n\r");
      exit(1);
   }

   xil_printf("FMC-IMAGEON Video Clock Initialization ...\n\r");
   fmc_imageon_init(&(config->fmc_imageon), "FMC-IMAGEON", &(config->fmc_imageon_iic));
   fmc_imageon_vclk_init( &(config->fmc_imageon) );
   fmc_imageon_vclk_config( &(config->fmc_imageon), FMC_IMAGEON_VCLK_FREQ_148_500_000);

   xil_printf("Resetting clock generator ...\n\r");
   reset_dcms(config);

   // Initialize Video Output Timing
   xil_printf("Initializing Video Output for 1080P60 ...\n\r");

   config->hdmio_width  = 1920;
   config->hdmio_height = 1080;
   config->hdmio_timing.IsHDMI        = 0; // DVI Mode
   config->hdmio_timing.IsEncrypted   = 0;
   config->hdmio_timing.IsInterlaced  = 0;
   config->hdmio_timing.ColorDepth    = 8;
   config->hdmio_timing.HActiveVideo  = 1920;
   config->hdmio_timing.HFrontPorch   =   88;
   config->hdmio_timing.HSyncWidth    =   44;
   config->hdmio_timing.HSyncPolarity =    1;
   config->hdmio_timing.HBackPorch    =  148;
   config->hdmio_timing.VActiveVideo  = 1080;
   config->hdmio_timing.VFrontPorch   =    4;
   config->hdmio_timing.VSyncWidth    =    5;
   config->hdmio_timing.VSyncPolarity =    1;
   config->hdmio_timing.VBackPorch    =   36;

   if (config->bVerbose) {
  	   xil_printf("ADV7511 Video Output Information\n\r");
    	   xil_printf( "\tHSYNC Timing     = hav=%04d, hfp=%02d, hsw=%02d(hsp=%d), hbp=%03d\n\r",
      			   config->hdmio_timing.HActiveVideo,
      			   config->hdmio_timing.HFrontPorch,
      			   config->hdmio_timing.HSyncWidth, config->hdmio_timing.HSyncPolarity,
      			   config->hdmio_timing.HBackPorch);
    	   xil_printf( "\tVSYNC Timing     = vav=%04d, vfp=%02d, vsw=%02d(vsp=%d), vbp=%03d\n\r",
    			   config->hdmio_timing.VActiveVideo,
    			   config->hdmio_timing.VFrontPorch,
    			   config->hdmio_timing.VSyncWidth, config->hdmio_timing.VSyncPolarity,
    			   config->hdmio_timing.VBackPorch);
    	   xil_printf( "\tVideo Dimensions = %d x %d\n\r", config->hdmio_width, config->hdmio_height );

   }

   config->hdmio_resolution = vres_detect(config->hdmio_width, config->hdmio_height);
   xil_printf("\tVideo Resolution = %s\n\r", vres_get_name(config->hdmio_resolution));

   xil_printf( "Video Generator Configuration ...\n\r");
   vgen_init( &(config->vtc_tpg), config->uDeviceId_VTC_tpg);
   vgen_config( &(config->vtc_tpg ), config->hdmio_resolution, 1);


   // FMC-IMAGEON HDMI Output Initialization
   xil_printf( "FMC-IMAGEON HDMI Output Initialization ...\n\r" );
   ret = fmc_imageon_hdmio_init(&(config->fmc_imageon), 1, &(config->hdmio_timing), 0);
   if (!ret) {
      xil_printf("ERROR : Failed to init FMC-IMAGEON HDMI Output Interface\n\r");
      exit(0);
   }


   // FMC-IMAGEON VITA Receiver Initialization
   xil_printf( "FMC-IMAGEON VITA Receiver Initialization ...\n\r" );
   fmc_imageon_vita_receiver_init( &(config->vita_receiver), "VITA-2000", config->uBaseAddr_VITA_Receiver );
   config->vita_receiver.uManualTap = 25;
   fmc_imageon_vita_receiver_spi_config( &(config->vita_receiver), (50000000/10000000) );


   xil_printf("Video Detector Configuration ...\n\r");
   vdet_init(&(config->vtc_ipipe), config->uDeviceId_VTC_ipipe);
   vdet_config(&(config->vtc_ipipe), config->hdmio_resolution, 1);


   // Initialize the Video Sources
   fmc_imageon_enable_tpg(config);
   int vita_enabled;
   int vita_enable_attempt=1;
   do {
	   xil_printf("\r\n\n\nFMC_IMAGEON_ENABLE_VITA, attempt %d\r\n\n\n", vita_enable_attempt++);
	   vita_enabled = fmc_imageon_enable_vita(config);
   } while(vita_enabled != 0);
   fmc_imageon_enable_ipipe(config);


   // Enable spread-spectrum clocking (SSC)
   enable_ssc(config);

   // Clear frame stores
   Xuint32 i;
   Xuint32 storage_size = config->uNumFrames_HdmiFrameBuffer * ((1920*1080)<<1);
   volatile Xuint32 *pStorageMem = (Xuint32 *)config->uBaseAddr_MEM_HdmiFrameBuffer;

   // Frame #1 - Red pixels
   for (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {
	   *pStorageMem++ = 0xF0525A52;
   }
   // Frame #2 - Green pixels
   for (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {
	   *pStorageMem++ = 0x36912291;
   }
   // Frame #3 - Blue pixels
   for (i = 0; i < storage_size / config->uNumFrames_HdmiFrameBuffer; i += 4) {
	   *pStorageMem++ = 0x6E29F029;
   }

   CRESAMPLE_Enable(config->uBaseAddr_CRES);


   // Initialize Output Side of AXI VDMA
   xil_printf( "Video DMA (Output Side) Initialization ...\n\r" );
   vfb_common_init(
      config->uDeviceId_VDMA_HdmiFrameBuffer, // uDeviceId
      &(config->vdma_hdmi)                    // pAxiVdma
      );
   vfb_tx_init(
      &(config->vdma_hdmi),                   // pAxiVdma
      &(config->vdmacfg_hdmi_read),           // pReadCfg
      config->hdmio_resolution,               // uVideoResolution
      config->hdmio_resolution,               // uStorageResolution
      config->uBaseAddr_MEM_HdmiFrameBuffer,  // uMemAddr
      config->uNumFrames_HdmiFrameBuffer      // uNumFrames
      );

   // Initialize Input Side of AXI VDMA
   xil_printf( "Video DMA (Input Side) Initialization ...\n\r" );
   vfb_rx_init(
      &(config->vdma_hdmi),                   // pAxiVdma
      &(config->vdmacfg_hdmi_write),          // pWriteCfg
      config->hdmio_resolution,               // uVideoResolution
      config->hdmio_resolution,               // uStorageResolution
      config->uBaseAddr_MEM_HdmiFrameBuffer,  // uMemAddr
      config->uNumFrames_HdmiFrameBuffer      // uNumFrames
      );

   sleep(1); // Version of sleep() we are using is off by 64X.

   // Status of AXI VDMA
   vfb_dump_registers( &(config->vdma_hdmi) );
   if ( vfb_check_errors( &(config->vdma_hdmi), 1/*clear errors, if any*/ ) ) {
      vfb_dump_registers( &(config->vdma_hdmi) );
   }

   xil_printf("\n\r");
   xil_printf( "Done\n\r" );
   xil_printf("\n\r");

   return 0;
}


int fmc_imageon_enable_tpg( camera_config_t *config ) {
   Xuint32 Reg32Value;
   Xuint32 CurrentSpeed;


   xil_printf("Test Pattern Generator Initialization ...\n\r");
   xTPG_config(config->hdmio_width, config->hdmio_height, config->uBaseAddr_TPG_PatternGenerator, 1);

   // Default to Zone Plate
   Reg32Value = XTPG_mReadSlaveReg0(config->uBaseAddr_TPG_PatternGenerator, 0);
   XTPG_mWriteSlaveReg0(config->uBaseAddr_TPG_PatternGenerator, 0, (Reg32Value & 0xFFFFFFF0) | 10);
   ZPlate_config(config->hdmio_width, config->hdmio_height, config->uBaseAddr_TPG_PatternGenerator);

   // Enable motion
   Reg32Value = XTPG_mReadSlaveReg1(config->uBaseAddr_TPG_PatternGenerator, 0);
   if ((Reg32Value & 0x00000001)==0)
	   XTPG_mWriteSlaveReg1(config->uBaseAddr_TPG_PatternGenerator, 0, (Reg32Value | 0x00000001));
   else
	   XTPG_mWriteSlaveReg1(config->uBaseAddr_TPG_PatternGenerator, 0, (Reg32Value & 0xFFFFFFFE));

   // Speed = 4
   Reg32Value = XTPG_mReadSlaveReg1(config->uBaseAddr_TPG_PatternGenerator, 0);
   CurrentSpeed = (Reg32Value&0x000001fe)>>1;
   CurrentSpeed = 4;
   XTPG_mWriteSlaveReg1(config->uBaseAddr_TPG_PatternGenerator, 0, (CurrentSpeed<<1)|(Reg32Value & 0x00000001));

   return 0;
}

int fmc_imageon_enable_vita( camera_config_t *config ) {
   int ret;

   // VITA-2000 Initialization
   xil_printf( "FMC-IMAGEON VITA Initialization ...\n\r" );
   ret = fmc_imageon_vita_receiver_sensor_initialize( &(config->vita_receiver), SENSOR_INIT_ENABLE, config->bVerbose );
   if (ret == 0) {
      xil_printf("VITA sensor failed to initialize ...\n\r");
      return -1;
   }

   sleep(1); // Version of sleep() we are using is off by 64X.

   xil_printf("FMC-IMAGEON VITA Configuration for 1080P60 timing ...\n\r");
   ret = fmc_imageon_vita_receiver_sensor_1080P60(&(config->vita_receiver), config->bVerbose);
   if (ret == 0 ) {
      xil_printf( "VITA sensor failed to configure for 1080P60 timing ...\n\r" );
      return -1;
   }

      sleep(1); // Version of sleep() we are using is off by 64X.
   fmc_imageon_vita_receiver_get_status(&(config->vita_receiver), &(config->vita_status_t1), 0/*config->bVerbose*/);
      sleep(1); // Version of sleep() we are using is off by 64X.
   fmc_imageon_vita_receiver_get_status(&(config->vita_receiver), &(config->vita_status_t2), 0/*config->bVerbose*/);

   int vita_width, vita_height, vita_rate;
   vita_width = config->vita_status_t1.cntImagePixels * 4;
   vita_height = config->vita_status_t1.cntImageLines;
   vita_rate = config->vita_status_t2.cntFrames - config->vita_status_t1.cntFrames;
   xil_printf("VITA Status = \n\r");
   xil_printf("\tImage Width  = %d\n\r", vita_width);
   xil_printf("\tImage Height = %d\n\r", vita_height);
   xil_printf("\tFrame Rate   = %d frames/sec\n\r", vita_rate);

   if ((vita_width != 1920) || (vita_height != 1080) || (vita_rate == 0)) {
	   return 1;
   }

   return 0;
}

int fmc_imageon_enable_ipipe( camera_config_t *config ) {

   xil_printf("Image Processing Pipeline (iPIPE) Initialization ...\n\r" );

   RGB_Reset(config->uBaseAddr_RGBYCC );
   RGB_ClearReset( config->uBaseAddr_RGBYCC );
   RGB_Enable( config->uBaseAddr_RGBYCC );
   xil_printf("\tRGB2YCrCb done\r\n");

   CFA_Reset( config->uBaseAddr_CFA );
   CFA_ClearReset( config->uBaseAddr_CFA );
   CFA_Enable( config->uBaseAddr_CFA );
   CFA_RegUpdateDisable( config->uBaseAddr_CFA );
   CFA_WriteReg( config->uBaseAddr_CFA, CFA_BAYER_PHASE, 0 );
   CFA_RegUpdateEnable( config->uBaseAddr_CFA );
   xil_printf("\tCFA done\r\n");


   return 0;
}


// Enables Spread-Spectrum Clocking (SSC)
void enable_ssc(camera_config_t *config) {

	int i;

	Xuint8 iic_cdce913_ssc_on[3][2] = {
			{0x10, 0x6D}, // SSC = 011 (0.75%)
			{0x11, 0xB6}, //
			{0x12, 0xDB}  //
	};

	xil_printf( "Enabling spread-spectrum clocking (SSC)\n\r" );
	xil_printf( "\ttype=down-spread, amount=-0.75%%\n\r" );
	fmc_imageon_iic_mux( &(config->fmc_imageon), FMC_IMAGEON_I2C_SELECT_VID_CLK );

	for ( i = 0; i < 3; i++ ) {
		config->fmc_imageon.pIIC->fpIicWrite( config->fmc_imageon.pIIC, FMC_IMAGEON_VID_CLK_ADDR,
				(0x80 | iic_cdce913_ssc_on[i][0]), &(iic_cdce913_ssc_on[i][1]), 1);
	}

	return;
}



// Toggles the reset on the DCM core (clock generator)
void reset_dcms(camera_config_t *config) {

	Xuint32 value;

	// Force reset high
	config->fmc_ipmi_iic.fpGpoRead( &(config->fmc_ipmi_iic), &value );
	value = value | 0x00000004; // Force bit 2 to 1
	config->fmc_ipmi_iic.fpGpoWrite( &(config->fmc_ipmi_iic), value );
    usleep(200000);

    // Force reset low
    config->fmc_ipmi_iic.fpGpoRead( &(config->fmc_ipmi_iic), &value );
    value = value & ~0x00000004; // Force bit 2 to 0
    config->fmc_ipmi_iic.fpGpoWrite( &(config->fmc_ipmi_iic), value );
    usleep(500000);
}
